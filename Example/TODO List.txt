DONE: Move Property List to Model
Aborted: Move Property wrapper into the Model- cancelled, because of fileprivate level
DONE: Provide Property Getter via Model

DONE: Define Write as a Map
DONE: WriteMap are a set of QWWritePath
DONE: WriteMap-subtree path are generated by the model - allPaths()
DONE: Define QWMapWrite which are either PropertyPath, or generated by the Model.
    Define Read and Write Paths
    Usage: <ModelPath>.write

DONE: Assert directly on Read/Write actions
    - At beginning of Smart scheduling, mark, create a new Tag
    - On start: Mark read + write set with Tag
    - On Read or Write, check if tag is present, else error
    - On Write, check if write level <= prop level, then increment write counter, else error
    => Ok, but I lost the "per Registration" previous check
    => Reading a property not registered is masked by a previous allowed access
    => And the reading of "ReadAccess" node is conflicting with previous check ...
    Solution: Add a closure to fill a new RegistrationUsage

DONE: Add Write path.dropLast in the Reading List
DONE: Simplify QWMediator to only manage one Root

- Replace most of DataUsage by a QWRegistrationUsage
- Add Registration Options
- Add DebugLevel

//TODO when Root is unique:
// make a full class initialized with currentTag and weak root Node
// Create it on debug only

- PrettyPrint Model
- PrettyPrint Registration
- Split Quantwm into Model and Mediator
- Write a good ReadMe
- sourcery: .customPropertyDefinition

//TODO: Manage the inserting of new priorityScheduling registration
// during Priority Scheduling
// and reject registrations to priority level higher than the current one.

//POSTPONNED: Provide property Setter via Model
