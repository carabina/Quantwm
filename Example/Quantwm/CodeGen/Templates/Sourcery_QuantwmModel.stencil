import Quantwm
{% for type in types.all %}
{% if type.implements.QWRoot_S %}
struct QWModel {
{% for prop in type.staticVariables %}
{% if prop|annotated:"root" %}
    static let rootProperty:QWRootProperty = {{type.name}}.{{prop.name}}
    static let root = {{type.name}}QWModel(path: QWPath(root: rootProperty))
{% endif %}
{% endfor %}
}
{% endif %}
{% endfor %}

{% for type in types.all %}
{% if type.implements.QWNode_S %}
struct {{ type.name }}QWModel: QWModelProperty
{
    let path:QWPath
    let node:QWMap
    let all: QWMap
{% for prop in type.storedVariables %}
{% if prop|annotated:"property" or prop|annotated:"node" %}
{% if prop.name|!hasPrefix:"_" %}}
SOURCERY ERROR: The monitored property {{prop.name}} does not start with a "_"
Solution 1: Prefix all your monitored property with "_": Sourcery will create
computed variable without the "_" which increment the property counter
Solution 2: Write your model and extension without sourcery for {{ type.name }} class, and use
for {{ type.name }} class QWNode protocol instead of QWNode_S which is transformed by Sourcery.
Solution 3: Adopt an other convention and change this stencil.
{% endif %}
{% set monitoredName %}{{prop.name|replace:"_",""}}{% endset %}
{% set propertyKName %}{{type.name}}.{{monitoredName}}K{% endset %}
{% if prop|annotated:"node" %}
{% set nodeTypeName %}{% if prop|annotated:"type" %}{{prop.annotations.type}}{% else %}{{prop.typeName}}{% endif %}{% endset %}
    let {{monitoredName}}: {{nodeTypeName}}QWModel
{% else %}
    let {{monitoredName}}: QWMap
{% endif %}
{% endif %}
{% endfor %}

    init(path: QWPath) {
        self.path = path
        self.node = path.map
        self.all = path.all().map
{% for prop in type.storedVariables %}
{% if prop|annotated:"property" or prop|annotated:"node" %}
  {% set monitoredName %}{{prop.name|replace:"_",""}}{% endset %}
  {% set propertyKName %}{{type.name}}.{{monitoredName}}K{% endset %}
  {% if prop|annotated:"node" %}
    {% set nodeTypeName %}{% if prop|annotated:"type" %}{{prop.annotations.type}}{% else %}{{prop.typeName}}{% endif %}{% endset %}

        // node: {{monitoredName}}
        self.{{monitoredName}} = {{nodeTypeName}}QWModel(path: path.appending({{ propertyKName }}))
  {% else %}

        // property: {{monitoredName}}
        self.{{monitoredName}} = path.appending({{ propertyKName }}).map
  {% endif %}
{% endif %}
{% endfor %}
    }

    // MARK: Getter Array

    // node: Getter Self
    func nodeGetter() -> (QWRoot) -> [QWNode] { return  path.generateNodeGetter() }

    {% for prop in type.storedVariables %}
    {% if prop|annotated:"property" %}
    {% set monitoredName %}{{prop.name|replace:"_",""}}{% endset %}
    {% set propertyKName %}{{type.name}}.{{monitoredName}}K{% endset %}

    // property: {{monitoredName}}
    func {{monitoredName}}Getter() -> (QWRoot) -> [{{prop.typeName}}] { return path.generatePropertyGetter(property: {{ propertyKName }}) }
    {% endif %}
    {% endfor %}

    // MARK: Property Array
    static func getPropertyArray() -> [QWProperty] { return qwPropertyArrayK }
    static let qwPropertyArrayK:[QWProperty] = [
{% for prop in type.storedVariables %}
{% if prop|annotated:"node" %}
        {{type.name}}.{{ prop.name|replace:"_","" }}K,   // node
{% endif %}
{% if prop|annotated:"property" %}
        {{type.name}}.{{ prop.name|replace:"_","" }}K,  // property
{% endif %}
{% endfor %}
    ]
}

{% endif %}
{% endfor %}
