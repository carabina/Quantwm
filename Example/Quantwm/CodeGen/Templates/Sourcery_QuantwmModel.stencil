import Quantwm
{% for type in types.all %}
{% if type.implements.QWRoot_S %}
class QWModel {
{% for prop in type.staticVariables %}
{% if prop|annotated:"root" %}
    static let rootProperty:QWRootProperty = {{type.name}}.{{prop.name}}
    static let root = {{type.name}}QWModel(path: QWPath(root: rootProperty, chain: []))
{% endif %}
{% endfor %}
}
{% endif %}
{% endfor %}

{% for type in types.all %}
{% if type.implements.QWNode_S %}
class {{ type.name }}QWModel
{
    init(path: QWPath) {
        self.node = path
    }
    let node:QWPath
    var all: QWPath {
        return node.all()
    }


{% for prop in type.storedVariables %}
{% if prop|annotated:"property" or prop|annotated:"node" %}
  {% if prop.name|!hasPrefix:"_" %}}
SOURCERY ERROR: The monitored property {{prop.name}} does not start with a "_"
Solution 1: Prefix all your monitored property with "_": Sourcery will create
computed variable without the "_" which increment the property counter
Solution 2: Write your model and extension without sourcery for {{ type.name }} class, and use
for {{ type.name }} class QWNode protocol instead of QWNode_S which is transformed by Sourcery.
Solution 3: Adopt an other convention and change this stencil.
  {% endif %}
  {% set monitoredName %}{{prop.name|replace:"_",""}}{% endset %}
  {% set propertyKName %}{{type.name}}.{{monitoredName}}K{% endset %}
  {% if prop|annotated:"node" %}
    {% set nodeTypeName %}{% if prop|annotated:"type" %}{{prop.annotations.type}}{% else %}{{prop.typeName}}{% endif %}{% endset %}
    var {{monitoredName}}: {{nodeTypeName}}QWModel {
        return {{nodeTypeName}}QWModel(path: node.appending({{ propertyKName }}))
    }
  {% else %}
    var {{monitoredName}}: QWPath {
        return node.appending({{ propertyKName }})
    }
  {% endif %}
{% endif %}
{% endfor %}
}

{% endif %}
{% endfor %}
