import Quantwm
{% for type in types.all %}
{% if type.implements.QWRoot_S %}
class QWModel {
{% for prop in type.staticVariables %}
{% if prop|annotated:"root" %}
    static let rootProperty:QWRootProperty = {{type.name}}.{{prop.name}}
    static var root = {{type.name}}QWModel(path: QWPath(root: rootProperty))
{% endif %}
{% endfor %}
}
{% endif %}
{% endfor %}

{% for type in types.all %}
{% if type.implements.QWNode_S %}
class {{ type.name }}QWModel
{
    let path:QWPath
    let node:QWMap
    var readDependency: QWMap
{% for prop in type.storedVariables %}
{% if prop|annotated:"property" or prop|annotated:"node" %}
{% if prop.name|!hasPrefix:"_" %}}
SOURCERY ERROR: The monitored property {{prop.name}} does not start with a "_"
Solution 1: Prefix all your monitored property with "_": Sourcery will create
computed variable without the "_" which increment the property counter
Solution 2: Write your model and extension without sourcery for {{ type.name }} class, and use
for {{ type.name }} class QWNode protocol instead of QWNode_S which is transformed by Sourcery.
Solution 3: Adopt an other convention and change this stencil.
{% endif %}
{% set monitoredName %}{{prop.name|replace:"_",""}}{% endset %}
{% set propertyKName %}{{type.name}}.{{monitoredName}}K{% endset %}
{% if prop|annotated:"node" %}
{% set nodeTypeName %}{% if prop|annotated:"type" %}{{prop.annotations.type}}{% else %}{{prop.typeName.unwrappedTypeName}}{% endif %}{% endset %}
    var {{monitoredName}}: {{nodeTypeName}}QWModel
    var {{monitoredName}}_allRead: QWMap {
        return QWMap(pathArray: {{monitoredName}}.allPathGetter(read: true))
    }
{% if prop|annotated:"readOnly" %}
{% else %}
    var {{monitoredName}}_allWrite: QWMap {
        return QWMap(pathArray: {{monitoredName}}.allPathGetter(read: false))
    }
{% endif %}

{% else %}
    fileprivate let {{monitoredName}}: QWPath
    var {{monitoredName}}_Read: QWMap {
        return {{monitoredName}}.map
{% if prop|annotated:"dependency" %}
        + {{prop.annotations.dependency}}
{% endif %}
    }
{% if prop|annotated:"readOnly" %}
{% else %}
    var {{monitoredName}}_Write: QWMap {
        return {{monitoredName}}.readWrite(read: false).map
{% if prop|annotated:"dependency" %}
+ {{prop.annotations.dependency}}
{% endif %}
    }
{% endif %}

{% endif %}
{% endif %}
{% endfor %}

    init(path: QWPath, readDependency: QWMap? = nil) {
        self.path = path
        self.node = path.map
        self.readDependency = readDependency ?? QWMap(pathArray:[])

{% for prop in type.storedVariables %}
{% if prop|annotated:"property" or prop|annotated:"node" %}
  {% set monitoredName %}{{prop.name|replace:"_",""}}{% endset %}
  {% set propertyKName %}{{type.name}}.{{monitoredName}}K{% endset %}
  {% if prop|annotated:"node" %}
    {% set nodeTypeName %}{% if prop|annotated:"type" %}{{prop.annotations.type}}{% else %}{{prop.typeName.unwrappedTypeName}}{% endif %}{% endset %}

        // node: {{monitoredName}}
        self.{{monitoredName}} = {{nodeTypeName}}QWModel(path: path.appending({{ propertyKName }}){% if prop|annotated:"dependency" %}, readDependency:{{prop.annotations.dependency}}{% endif %})
  {% else %}

        // property: {{monitoredName}}
        self.{{monitoredName}} = path.appending({{ propertyKName }})
  {% endif %}
{% endif %}
{% endfor %}
    }

// MARK: Computed Variables Array

{% for prop in type.computedVariables %}
    {% set monitoredName %}{{prop.name|replace:"_",""}}{% endset %}
    {% set propertyKName %}{{type.name}}.{{monitoredName}}K{% endset %}
    {% if prop|annotated:"node" %}
        {% if prop|annotated:"node" %}
            {% set nodeTypeName %}{% if prop|annotated:"type" %}{{prop.annotations.type}}{% else %}{{prop.typeName.unwrappedTypeName}}{% endif %}{% endset %}

    // node: Computed {{monitoredName}}
    var {{monitoredName}}:{{nodeTypeName}}QWModel {
        return {{nodeTypeName}}QWModel(path: path.appending({{ propertyKName }}){% if prop|annotated:"dependency" %}, readDependency:{{prop.annotations.dependency}}{% endif %})
    }
        {% endif %}
    {% endif %}

    {% if prop|annotated:"property" %}
    lazy fileprivate var {{monitoredName}}: QWPath = path.appending({{ propertyKName }})
    var {{monitoredName}}_Read: QWMap {
        return {{monitoredName}}.map
        {% if prop|annotated:"dependency" %}
            + {{prop.annotations.dependency}}
        {% endif %}
    }
        {% if prop|annotated:"readOnly" %}
        {% else %}
    var {{monitoredName}}_Write: QWMap {
        return {{monitoredName}}.readWrite(read: false).map
            {% if prop|annotated:"dependency" %}
        + {{prop.annotations.dependency}}
            {% endif %}
    }
        {% endif %}
    {% endif %}
{% endfor %}


    // MARK: Getter Array

    {% for prop in type.instanceVariables %}
    {% if prop|annotated:"property" or prop|annotated:"node" %}
    {% set monitoredName %}{{prop.name|replace:"_",""}}{% endset %}
    {% set propertyKName %}{{type.name}}.{{monitoredName}}K{% endset %}
    {% if prop|annotated:"node" %}
    {% set nodeTypeName %}{% if prop|annotated:"type" %}{{prop.annotations.type}}{% else %}{{prop.typeName}}{% endif %}{% endset %}

    // node: Getter {{monitoredName}}
    func {{monitoredName}}Getter(_ root:{{type.name}}) -> {{prop.typeName}} {
        return root[keyPath:\{{type.name}}.{{monitoredName}}]
    }

{% else %}

    // property: {{monitoredName}}
    func {{monitoredName}}Getter(_ root:{{type.name}}) -> {{prop.typeName}} {
        return root[keyPath:\{{type.name}}.{{monitoredName}}]
    }
    {% endif %}
    {% endif %}
    {% endfor %}


    var all_Write: QWMap {
        return QWMap(pathArray: allPathGetter(read: false))
            + self.readDependency
    }

    var all_Read: QWMap {
        return QWMap(pathArray: allPathGetter(read: true))
            + self.readDependency
    }

    fileprivate func allPathGetter(read: Bool) -> [QWPath]{
        var pathArray: [QWPath] = []
        pathArray.append(path.readWrite(read: read))
        {% for prop in type.instanceVariables %}
        {% set monitoredName %}{{prop.name|replace:"_",""}}{% endset %}
        {% set propertyKName %}{{type.name}}.{{monitoredName}}K{% endset %}
        {% if prop|annotated:"property" %}
        pathArray.append(path.appending({{propertyKName}}).readWrite(read: read))
        {% endif %}
        {% if prop|annotated:"node" %}
        pathArray += {{monitoredName}}.allPathGetter(read: read)
        {% endif %}
        {% endfor %}
        return pathArray
    }

    // MARK: Property Array
    static func getPropertyArray() -> [QWProperty] { return qwPropertyArrayK }
    static let qwPropertyArrayK:[QWProperty] = [
{% for prop in type.instanceVariables %}
{% if prop|annotated:"node" %}
        {{type.name}}.{{ prop.name|replace:"_","" }}K,   // node
{% endif %}
{% if prop|annotated:"property" %}
        {{type.name}}.{{ prop.name|replace:"_","" }}K,  // property
{% endif %}
{% endfor %}
    ]
}

{% endif %}
{% endfor %}
